/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as ProductsRouteImport } from './routes/products/route'
import { Route as AppRouteImport } from './routes/app/route'
import { Route as IndexImport } from './routes/index'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AppDashboardImport } from './routes/app/dashboard'
import { Route as ProductsProductIdImport } from './routes/products/product.$id'

// Create Virtual Routes

const AppBooksLazyImport = createFileRoute('/app/books')()

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const ProductsRouteRoute = ProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRoute,
} as any)

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProductsRouteRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppBooksLazyRoute = AppBooksLazyImport.update({
  id: '/books',
  path: '/books',
  getParentRoute: () => AppRouteRoute,
} as any).lazy(() => import('./routes/app/books.lazy').then((d) => d.Route))

const AppDashboardRoute = AppDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRouteRoute,
} as any)

const ProductsProductIdRoute = ProductsProductIdImport.update({
  id: '/product/$id',
  path: '/product/$id',
  getParentRoute: () => ProductsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/app/dashboard': {
      id: '/app/dashboard'
      path: '/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppDashboardImport
      parentRoute: typeof AppRouteImport
    }
    '/app/books': {
      id: '/app/books'
      path: '/books'
      fullPath: '/app/books'
      preLoaderRoute: typeof AppBooksLazyImport
      parentRoute: typeof AppRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/'
      fullPath: '/products/'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof ProductsRouteImport
    }
    '/products/product/$id': {
      id: '/products/product/$id'
      path: '/product/$id'
      fullPath: '/products/product/$id'
      preLoaderRoute: typeof ProductsProductIdImport
      parentRoute: typeof ProductsRouteImport
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppDashboardRoute: typeof AppDashboardRoute
  AppBooksLazyRoute: typeof AppBooksLazyRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppDashboardRoute: AppDashboardRoute,
  AppBooksLazyRoute: AppBooksLazyRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface ProductsRouteRouteChildren {
  ProductsIndexRoute: typeof ProductsIndexRoute
  ProductsProductIdRoute: typeof ProductsProductIdRoute
}

const ProductsRouteRouteChildren: ProductsRouteRouteChildren = {
  ProductsIndexRoute: ProductsIndexRoute,
  ProductsProductIdRoute: ProductsProductIdRoute,
}

const ProductsRouteRouteWithChildren = ProductsRouteRoute._addFileChildren(
  ProductsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/products': typeof ProductsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/books': typeof AppBooksLazyRoute
  '/app/': typeof AppIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/products/product/$id': typeof ProductsProductIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/books': typeof AppBooksLazyRoute
  '/app': typeof AppIndexRoute
  '/products': typeof ProductsIndexRoute
  '/products/product/$id': typeof ProductsProductIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/products': typeof ProductsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/books': typeof AppBooksLazyRoute
  '/app/': typeof AppIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/products/product/$id': typeof ProductsProductIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/products'
    | '/about'
    | '/app/dashboard'
    | '/app/books'
    | '/app/'
    | '/products/'
    | '/products/product/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/app/dashboard'
    | '/app/books'
    | '/app'
    | '/products'
    | '/products/product/$id'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/products'
    | '/about'
    | '/app/dashboard'
    | '/app/books'
    | '/app/'
    | '/products/'
    | '/products/product/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  ProductsRouteRoute: typeof ProductsRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  ProductsRouteRoute: ProductsRouteRouteWithChildren,
  AboutRoute: AboutRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/app",
        "/products",
        "/about"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/app": {
      "filePath": "app/route.jsx",
      "children": [
        "/app/dashboard",
        "/app/books",
        "/app/"
      ]
    },
    "/products": {
      "filePath": "products/route.jsx",
      "children": [
        "/products/",
        "/products/product/$id"
      ]
    },
    "/about": {
      "filePath": "about.jsx"
    },
    "/app/dashboard": {
      "filePath": "app/dashboard.jsx",
      "parent": "/app"
    },
    "/app/books": {
      "filePath": "app/books.lazy.jsx",
      "parent": "/app"
    },
    "/app/": {
      "filePath": "app/index.jsx",
      "parent": "/app"
    },
    "/products/": {
      "filePath": "products/index.jsx",
      "parent": "/products"
    },
    "/products/product/$id": {
      "filePath": "products/product.$id.jsx",
      "parent": "/products"
    }
  }
}
ROUTE_MANIFEST_END */
